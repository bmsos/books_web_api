const CustomError = require('../Utils/CustomError')

const devErrors = (res, error) => {
    res.status(error.statusCode).json({
        status: error.status,
        message: error.message,
        stackTrace: error.stack,
        error: error
    })
}

const castErrorHandler = err => {
    const msg = `Invalid value for ${err.path}: ${err.value}`
    return new CustomError(msg, 400)
}

const handleExpiredJWT = err => {
    return new CustomError('JWT has expired. Please login again.', 401)
}

const handleJWTError = err => {
    return new CustomError('Invalid token. Please login again.', 401)
}

const prodErrors = (res, error) => {
    if (error.isOperational) {
        res.status(error.statusCode).json({
            status: error.status,
            message: error.message
        })
    } else {
        // errors created by mongoose will have no error.isOperational, so it will be a server error and if those are non operational error we want to send the client a basic error
        // AULA 96
        // there 3 types of error generated by mongoose:
            // 1. CAST ERROR - invalid document ID
            // 2. Duplicate field 
            // 3. Validation error
        res.status(500).json({
            status: 'error',
            message: 'Something went wrong, please try again later.'
        })
    }
}

module.exports = (error, req, res, next) => {
    console.log(error)
    error.statusCode = error.statusCode || 500  // if the error doesn't have a status code it will be defined as 500 which is the default because its an internal server error
    error.status = error.status || 'error'
    
    //AULA 95
    // enviar detalhes do erro apenas para developers, nao para o client
    if (process.env.NODE_ENV == 'development') {    
        devErrors(res, error)
    } else if (process.env.NODE_ENV == 'production') {
        if (error.name === 'CastError') error = castErrorHandler(error)
        if (error.name === 'TokenExpiredError') error = handleExpiredJWT(error)
        if(error.name === 'JsonWebTokenError') error = handleJWTError(error)
        prodErrors(res, error)
    }
}